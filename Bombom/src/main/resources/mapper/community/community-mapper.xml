<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="community">

	<resultMap type="community" id="communityMap">
		<result property="cmNo" column="CM_NO" />
		<result property="cmWriter" column="CM_WRITER" />
		<result property="cmLike" column="CM_LIKE" />
		<result property="cmView" column="CM_VIEW" />
		<result property="cmDate" column="CM_DATE" />
		<result property="cmTitle" column="CM_TITLE" />
		<result property="cmContent" column="CM_CONTENT" />
		<result property="cmThumbnail" column="CM_THUMBNAIL" />
		<result property="memNick" column="MEM_NICK" />
		<result property="memPro" column="MEM_PRO" />
		<result property="memNo" column="MEM_NO" />
	</resultMap>

	<resultMap type="boardReply" id="boardReplyMap">
		<result property="reply_id" column="REPLY_ID" />
		<result property="board_id" column="BOARD_ID" />
		<result property="parent_id" column="PARENT_ID" />
		<result property="depth" column="DEPTH" />
		<result property="reply_content" column="REPLY_CONTENT" />
		<result property="mem_no" column="MEM_NO" />
		<result property="register_datetime" column="REGISTER_DATETIME"
			typeHandler="dateStr" />
		<result property="com_reason" column="COM_REASON" />
		<result property="com_date" column="COM_DATE"
			typeHandler="dateStr" />
		<result property="com_status" column="COM_STATUS" />
		<result property="mem_nick" column="MEM_NICK" />
		<result property="mem_pro" column="MEM_PRO" />
	</resultMap>
	<resultMap type="member" id="memberMap">
		<result property="memNo" column="mem_no"/>
		<result property="memNick" column="mem_nick"/>
		<result property="memPwd" column="mem_pwd"/>
		<result property="memEmail" column="mem_email"/>
		<result property="memPro" column="mem_pro"/>
		<result property="memBuyCount" column="mem_buy_count"/>
		<result property="memWarnCount" column="mem_warn_count"/>
		<result property="memManagerYn" column="mem_manager_yn"/>
		<result property="memStatus" column="mem_status"/>
		<result property="memPoint" column="mem_point"/>
		<result property="memCmLike" column="mem_cm_like" typeHandler="stringArr"/>
		<result property="memSns" column="mem_sns" />
	</resultMap>

 	<!--  커뮤 글 등록 -->
	<insert id="insertCommunity" parameterType="community"> <!-- parmeterType은 하나만 쓸 수 있는데 두개 이상일때는 객체나 맵에 담는다. -->
		INSERT INTO COMMUNITY
		VALUES('CM'||SEQ_CM_NO.NEXTVAL,#{cmWriter},#{cmLike},#{cmView},SYSDATE,#{cmTitle},#{cmContent},#{cmThumbnail})
	</insert>

    <!--  커뮤니티 게시글 목록 -->
	<select id="selectCommunityList" parameterType="map" resultMap="communityMap">
		SELECT * FROM
		COMMUNITY CM
		LEFT JOIN MEMBER MB
		ON CM.CM_WRITER = MB.MEM_NO
		ORDER BY 
		<if test="order == 'update'">
		CM_DATE 
		</if>
		<if test="order == 'like'">
		CM_LIKE
		</if>
		<if test="order == 'view'">
		CM_VIEW
		</if>
		
		 DESC
	</select>
	
	<!-- 커뮤니티 글 상세보기 -->
	<select id="selectCommunityOne" parameterType="string"
		resultMap="communityMap">
		SELECT * FROM
		COMMUNITY CM
		LEFT JOIN MEMBER MB
		ON CM.CM_WRITER = MB.MEM_NO
		WHERE CM_NO=#{cmNo}
	</select>

    <!-- 커뮤 글 삭제 -->
	<delete id="deleteCommunity" parameterType="string">
		DELETE FROM COMMUNITY
		WHERE CM_NO=#{cmNo}
	</delete>
    
    <!-- 커뮤 글 수정 -->
	<update id="updateCommunity" parameterType="community">
		UPDATE COMMUNITY SET
		CM_TITLE=#{cmTitle},CM_CONTENT=#{cmContent},
		CM_THUMBNAIL=#{cmThumbnail}
		WHERE CM_NO=#{cmNo}
	</update>
	
	<!-- 
	<select id="selectThumb" parameterType="string" resultMap="community">
	SELECT CM_THUMBNAIL FROM COMMUNITY WHERE CM_NO=#{cmNo}
	</select> -->
   
    <!-- 커뮤 조회수 증가 -->
	<update id="communityView" parameterType="string">
		UPDATE COMMUNITY SET
		CM_VIEW = CM_VIEW +1
		WHERE CM_NO =#{cmNo}
	</update>

	<select id="selectCount" resultType="_int">   <!-- select일때 select에서 가져오는 자료형  -->
		SELECT COUNT(*) FROM
		COMMUNITY
	</select>
	
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="boardReply">
		insert into board_reply(
		reply_id,
		board_id,
		reply_content,
		depth,
		mem_no,
		register_datetime
		)values(
		'REP'||SEQ_REPLY_ID.NEXTVAL,
		#{board_id},
		#{reply_content},
		0,
		#{mem_no},
		SYSDATE      <!-- my batis mapper에서 오라클 sysdate 사용하기 때문에 값을 따로 받지 않아도 된다. --> 
		)
	</insert>
	
	<insert id="insertReReply" parameterType="boardReply">
	insert into board_reply(
	reply_id,
	board_id,
	reply_content,
	parent_id,
	depth,
	mem_no,
	register_datetime
	)values(
	'REP'||SEQ_REPLY_ID.NEXTVAL,
	#{board_id},
	#{reply_content},
	#{parent_id},
	1,
	#{mem_no},
	SYSDATE
	)
	</insert>
	
	<!-- 커뮤니티 댓글 + 대댓글 목록 -->
	<select id="selectBoardReplyList" resultType="boardReply"
		parameterType="string">
		select
		reply_id,
		board_id,
		parent_id,
		depth,
		reply_content,
		com_status,
		br.mem_no,
		register_datetime,
		mem_nick,
		mem_pro
		from
		board_reply br
		left join member mb
		on br.mem_no = mb.mem_no
		where
		board_id = #{cmNo}
		order by register_datetime desc 
	</select>
	
	<select id="selectChildBoardReplyList" parameterType="string" resultType="boardReply">
		select
		reply_id,
		board_id,
		parent_id,
		depth,
		reply_content,
		com_status,
		br.mem_no,
		TO_CHAR(REGISTER_DATETIME,'YYYY-MM-DD')AS REGISTER_DATETIME,
		mem_nick,
		mem_pro
		from
		board_reply br
		left join member mb
		on br.mem_no = mb.mem_no
		where
		parent_id = #{reply_id}
		order by register_datetime desc 
	</select>

   
	<select id="selectSeqReply" resultType="string">
		SELECT 'REP'||SEQ_REPLY_ID.CURRVAL FROM DUAL
	</select>

    
	<select id="selectBoardReplyOne" parameterType="string"
		resultMap="boardReplyMap">
		SELECT
		REPLY_ID,BOARD_ID,PARENT_ID,DEPTH,REPLY_CONTENT,MEM_NO,
		TO_CHAR(REGISTER_DATETIME,'YYYY-MM-DD HH24:MI:SS')AS REGISTER_DATETIME,
		mem_nick,mem_pro
		FROM BOARD_REPLY BR
		LEFT JOIN MEMBER MB
		ON BR.MEM_NO = MB.MEM_NO
		WHERE BR.REPLY_ID =#{reply_id}
	</select>

    <!--  댓글 삭제 -->
	<delete id="deleteReply" parameterType="string">
		delete
		from
		board_reply
		where
		reply_id = #{reply_id}
		<if test="parent_id!=null">
		OR parent_id = #{reply_id}
		</if>
	</delete>
	
	<!-- 대댓글 삭제 -->
	<!-- <delete id="deleteReply2" parameterType="string">
	delete
	from
	board_reply
	where
	reply_id=#{reply_id}
	<if test="depth == 1 "></if>
	</delete> -->
	
	

	<!-- 댓글 신고하기 -->
	<update id="reportReply" parameterType="boardReply">
	update board_reply  <!-- 조인 못씀  -->
	set
	com_reason = #{com_reason},
	com_status = #{com_status}
	where 
	reply_id = #{reply_id}
	</update>
	
	<!-- 관리자 댓글 목록 -->
	<select id="selectReplyList" parameterType="map" resultMap="boardReplyMap">
		SELECT *
		FROM BOARD_REPLY BR
		LEFT JOIN MEMBER MB
		ON BR.MEM_NO = MB.MEM_NO
		WHERE COM_STATUS IS NOT NULL 
		<if test="order != ''">
		AND COM_STATUS = #{order} 
		</if>
		<if test="keyword!=null or keyword!=''">
		AND MEM_NICK LIKE '%'||#{keyword}||'%' 
		</if>
		ORDER BY COM_DATE DESC
	</select>
	
	<!-- 관리자 댓글 신고 처리 -->
	<update id="warnMemberYn" parameterType="boardReply">
	update board_reply set
	com_status = #{com_status} where reply_id=#{reply_id}
	</update> 
	
	
   <!-- 댓글 페이징 처리 -->
   <select id="selectPage" resultType="_int">
		SELECT COUNT(*) FROM
		BOARD_REPLY
	</select>
   
    <!-- 좋아요 수 업데이트 -->
    <update id="updateLikeCount" parameterType="map">
    	UPDATE COMMUNITY 
    	<if test="value==1">
    		SET CM_LIKE=CM_LIKE+1 
    	</if>
    	<if test="value==0">
    		SET CM_LIKE=CM_LIKE-1
    	</if>
    	WHERE CM_NO=#{cmNo}
    </update>
    <!-- 좋아요 수만 가져오기 -->
	<select id="selectLikeCount" parameterType="string" resultType="_int">
		SELECT CM_LIKE FROM COMMUNITY WHERE CM_NO=#{cmNo}
	</select>
	<!-- 좋아요한 글 번호 넣기 -->
	<insert id="updateLikeNo" parameterType="map">
		<selectKey keyProperty="memCmLike" resultType="string" order="BEFORE">
			SELECT MEM_CM_LIKE FROM MEMBER WHERE MEM_NO=#{memNo}
		</selectKey>
		UPDATE MEMBER 
		<if test="memCmLike == null">
			SET MEM_CM_LIKE=#{cmNo} 
		</if>
		<if test="memCmLike != null">
			SET MEM_CM_LIKE=MEM_CM_LIKE||','||#{cmNo}
		</if>
		WHERE MEM_NO=#{memNo} 
	</insert>
	<!-- 좋아요 취소 시 글 번호 넣기 -->
	<update id="deleteLikeNo" parameterType="map">
		UPDATE MEMBER SET MEM_CM_LIKE=#{memCmLike, typeHandler=stringArr} WHERE MEM_NO=#{memNo} 
	</update>
  	<!-- 좋아요한 글 가져오기-->
  	<select id="selectLikeNo" parameterType="string" resultMap="memberMap">
  		SELECT MEM_CM_LIKE FROM MEMBER WHERE MEM_NO=#{memNo}
  	</select>
  	<!--내가 쓴 커뮤니티글 리스트 -세민  -->
  	<select id="selectComList" parameterType="string" resultMap="communityMap">
  		SELECT * FROM COMMUNITY WHERE CM_WRITER=#{memNo} ORDER BY CM_DATE DESC
  	</select>
  	<!--내가 쓴 커뮤글 카운트 -sm  -->
  	<select id="selectComCount" parameterType="string" resultType="_int">
  		SELECT COUNT(*) FROM COMMUNITY WHERE CM_WRITER=#{memNo} 
  	</select>
  	<!--내가 쓴 댓글  -세민  -->
  	<select id="selectMyReplyList" parameterType="string" resultMap="boardReplyMap">
  		SELECT * FROM BOARD_REPLY WHERE MEM_NO=#{memNo} ORDER BY REGISTER_DATETIME DESC
  	</select>
  	<!--내가 쓴 댓글 카운트 -sm  -->
  	<select id="selectMyReplyCount" parameterType="string" resultType="_int">
  		SELECT COUNT(*) FROM BOARD_REPLY WHERE MEM_NO=#{memNo}
  	</select>
  	<!--나의활동 커뮤글 삭제 sm  -->
  	<delete id="deleteMyCommunity" parameterType="arrayList">
		DELETE FROM COMMUNITY
		WHERE CM_NO IN 
		<foreach item="cmNo" index="index" collection="list" open="(" separator="," close=")">
		(#{cmNo})
		</foreach>		
	</delete>
	<!--나의활동  댓글 삭제 sm-->
	<delete id="deleteMyReply" parameterType="arrayList">
		DELETE FROM BOARD_REPLY 
		WHERE REPLY_ID IN
		<foreach item="replyNo" index="index" collection="list" open="(" separator="," close=")">
		(#{replyNo})
		</foreach>
	</delete>
</mapper>